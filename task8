6--3
from pprint import pprint
import Levenshtein as ls

                                                                             # Отделение двумя пробелами  
class Person:
    def __init__(self, height, name, age, hometown):
        self.height, self.name, self.age, self.hometown = (height, name,
                                                          age, hometown)     # Слишком длинная строка, 86-->72
        self.key = (height, name)

                                                                             # Отделение двумя пробелами
    def __repr__(self):
        return 'Person(%s, %s, %s, %s)' % (self.height, self.name,           # Слишком длинная строка, 92-->68
                                           self.age, self.hometown)

                                                                             # Отделение двумя пробелами
indicator = True                                                             # На всякий случай убрал сокращение
maks = Person(197, 'Максим', 13, 'Пермь')
vlad = Person(188, 'Владимир', 49, 'Кемерово')
dmitr = Person(193, 'Дмитрий', 24, 'Свердловск')
anton = Person(202, 'Антоний', 33, 'Вятка')
people = {maks.key:maks, vlad.key:vlad, dmitr.key:dmitr, anton.key:anton}
pprint(people, sort_dicts = False)
field = input('По какому полю будем искать? ')
if field == 'рост':
    height = int(input('какого роста человека ищете? '))
    for key in people:
        if (height+2 >= key[0] >= height-2):
            print(people[key])
            indicator = False 
else:
    name = input('какого имени человека ищете? ')
    for key in people:
        if ls.distance(key[1].lower(), name.lower()) <= 2:
            print(people[key])
            indicator = False
if indicator == True:                                                             # Лишний пробел перед двоеточием  
    print('ПОДХОДЯЩЕГО ЧЕЛОВЕКА НЕ НАЙДЕНО')